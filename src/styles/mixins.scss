$breakpoints: (
  'xs': 0,
  'sm': 576px,
  'md': 768px,
  'lg': 992px,
  'xl': 1200px,
  'xxl': 1400px
);

@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn "Invalid breakpoint: #{$breakpoint}.";
  }
}

@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn "Invalid breakpoint: #{$breakpoint}.";
  }
}

@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn "Invalid breakpoint: #{$breakpoint}.";
  }
}

@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

@mixin grid($columns: 1, $gap: var(--spacing-md)) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

@mixin position-absolute($top: null, $right: null, $bottom: null, $left: null) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin truncate($lines: 1) {
  @if $lines == 1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

@mixin hover-effect($scale: 1.03, $shadow: true) {
  transition: transform var(--transition-speed), box-shadow var(--transition-speed);
  
  &:hover {
    transform: translateY(-3px) scale($scale);
    
    @if $shadow {
      box-shadow: 0 10px 20px var(--shadow-color);
    }
  }
}

@mixin gradient($direction: to right, $start-color: var(--primary-color), $end-color: var(--primary-dark)) {
  background: linear-gradient($direction, $start-color, $end-color);
}

@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem 1rem;
  border-radius: var(--border-radius);
  font-weight: 500;
  transition: all var(--transition-speed);
  cursor: pointer;
  border: none;
  
  &:disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }
}

@mixin container {
  width: 100%;
  max-width: $container-width;
  margin-left: auto;
  margin-right: auto;
  padding-left: $spacing-md;
  padding-right: $spacing-md;
  box-sizing: border-box;
}

@mixin loading-spinner($size: 40px, $color: $primary-color) {
  position: relative;
  width: $size;
  height: $size;
  
  &::before {
    content: '';
    box-sizing: border-box;
    position: absolute;
    width: $size;
    height: $size;
    border-radius: 50%;
    border: 3px solid transparent;
    border-top-color: $color;
    animation: spinner 0.8s linear infinite;
  }
  
  @keyframes spinner {
    to {
      transform: rotate(360deg);
    }
  }
}

@mixin skeleton-loading {
  position: relative;
  overflow: hidden;
  background-color: #e0e0e0;
  
  &::after {
    content: "";
    display: block;
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    animation: skeleton-loading 1.5s infinite;
  }
  
  @keyframes skeleton-loading {
    to {
      left: 100%;
    }
  }
}
